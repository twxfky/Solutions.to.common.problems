class ListNode {
  int val;
  ListNode next;

  ListNode(int val) {
    this.val = val;
    this.next = null;
  }
}

class Solution {
  public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    ListNode head = null;
    ListNode tail = null;

    while (l1 != null && l2 != null) {
      if (l1.val < l2.val) {
        if (head == null) {
          head = l1;
          tail = l1;
        } else {
          tail.next = l1;
          tail = tail.next;
        }
        l1 = l1.next;
      } else {
        if (head == null) {
          head = l2;
          tail = l2;
        } else {
          tail.next = l2;
          tail = tail.next;
        }
        l2 = l2.next;
      }
    }

    if (l1 != null) {
      tail.next = l1;
    }

    if (l2 != null) {
      tail.next = l2;
    }

    return head;
  }

  public ListNode mergeKLists(ListNode[] lists) {
    ListNode head = null;
    ListNode tail = null;

    for (ListNode list : lists) {
      head = mergeTwoLists(head, list);
    }

    return head;
  }
}

// 测试代码
public class Main {
  public static void main(String[] args) {
    ListNode l1 = new ListNode(1);
    l1.next = new ListNode(3);
    l1.next.next = new ListNode(5);

    ListNode l2 = new ListNode(2);
    l2.next = new ListNode(4);
    l2.next.next = new ListNode(6);

    ListNode l3 = new ListNode(7);
    l3.next = new ListNode(8);
    l3.next.next = new ListNode(9);

    ListNode[] lists = {l1, l2, l3};

    Solution solution = new Solution();
    ListNode mergedList = solution.mergeKLists(lists);

    while (mergedList != null) {
      System.out.println(mergedList.val);
      mergedList = mergedList.next;
    }
  }
}
